plugins {
	alias libs.plugins.fabric.loom
	id 'maven-publish'
	alias libs.plugins.kotlin
	alias libs.plugins.minotaur
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	exclusiveContent {
		forRepository {
			maven {
				name = "Modrinth"
				url = "https://api.modrinth.com/maven"
			}
		}
		filter {
			includeGroup "maven.modrinth"
		}
	}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"villager-inventory-hwyla-plugin" {
			sourceSet sourceSets.client
			sourceSet sourceSets.main
		}
	}

}

fabricApi {
	configureDataGeneration {
		client = true
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft libs.minecraft
	mappings loom.officialMojangMappings()
	modImplementation libs.bundles.fabric
	modImplementation libs.jade
	modImplementation libs.wthit
}

processResources {
	inputs.property "version", project.version
	inputs.property "minecraft", libs.versions.minecraft
	inputs.property "fabricloader", libs.versions.fabric.loader
	inputs.property "jade", libs.versions.jade
	inputs.property "wthit", libs.versions.wthit

	filesMatching("fabric.mod.json") {
		expand "version": inputs.properties.version,
			   "minecraft": inputs.properties.minecraft,
			   "fabricloader": inputs.properties.fabricloader,
			   "jade": inputs.properties.jade,
			   "wthit": inputs.properties.wthit
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = 21
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	inputs.property "archivesName", project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${inputs.properties.archivesName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
		maven {
			name = "GitHubPackages"
			url = "https://maven.pkg.github.com/${System.getenv("GITHUB_REPOSITORY")}"
			credentials {
				username = System.getenv("GITHUB_ACTOR")
				password = System.getenv("GITHUB_TOKEN")
			}
		}
	}
}

modrinth {
	token = System.getenv("MODRINTH_TOKEN")
	projectId = project.base.archivesName
	versionType = project.mod_version_type
	uploadFile = remapJar
	gameVersions = [libs.versions.minecraft.get()]
	dependencies {
		optional.version "jade", libs.versions.jade.get()
		optional.version "wthit", libs.versions.wthit.get()
	}
}
